generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model box_categories {
  category_id Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String    @unique(map: "box_categories_name_unique") @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  order       Int       @default(255) @db.UnsignedTinyInt
  boxes       boxes[]
}

model box_images {
  image_id                               Int       @id @default(autoincrement()) @db.UnsignedInt
  name                                   String    @unique(map: "box_images_name_unique") @db.VarChar(255)
  width                                  Int       @db.UnsignedSmallInt
  height                                 Int       @db.UnsignedSmallInt
  created_at                             DateTime? @db.Timestamp(0)
  updated_at                             DateTime? @db.Timestamp(0)
  boxes_boxes_big_image_idTobox_images   boxes[]   @relation("boxes_big_image_idTobox_images")
  boxes_boxes_small_image_idTobox_images boxes[]   @relation("boxes_small_image_idTobox_images")
}

model box_rare_statuses {
  rare_status_id Int       @id @default(autoincrement()) @db.UnsignedInt
  name           String    @unique(map: "box_rare_statuses_name_unique") @db.VarChar(255)
  slug           String    @unique(map: "box_rare_statuses_slug_unique") @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model categories {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  parent_id        Int?         @db.UnsignedInt
  order            Int          @default(1)
  name             String       @db.VarChar(255)
  slug             String       @unique(map: "categories_slug_unique") @db.VarChar(255)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  categories       categories?  @relation("categoriesTocategories_parent_id", fields: [parent_id], references: [id], map: "categories_parent_id_foreign")
  other_categories categories[] @relation("categoriesTocategories_parent_id")

  @@index([parent_id], map: "categories_parent_id_foreign")
}

model clients {
  client_id  Int             @id @default(autoincrement()) @db.UnsignedInt
  firstname  String          @db.VarChar(64)
  lastname   String?         @db.VarChar(64)
  patronymic String?         @db.VarChar(64)
  gender     clients_gender?
  phone      String?         @db.VarChar(64)
  email      String?         @db.VarChar(64)
  orders     orders[]
}

model data_rows {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  data_type_id Int        @db.UnsignedInt
  field        String     @db.VarChar(255)
  type         String     @db.VarChar(255)
  display_name String     @db.VarChar(255)
  required     Boolean    @default(false)
  browse       Boolean    @default(true)
  read         Boolean    @default(true)
  edit         Boolean    @default(true)
  add          Boolean    @default(true)
  delete       Boolean    @default(true)
  details      String?    @db.Text
  order        Int        @default(1)
  data_types   data_types @relation(fields: [data_type_id], references: [id], onDelete: Cascade, map: "data_rows_data_type_id_foreign")

  @@index([data_type_id], map: "data_rows_data_type_id_foreign")
}

model data_types {
  id                    Int         @id @default(autoincrement()) @db.UnsignedInt
  name                  String      @unique(map: "data_types_name_unique") @db.VarChar(255)
  slug                  String      @unique(map: "data_types_slug_unique") @db.VarChar(255)
  display_name_singular String      @db.VarChar(255)
  display_name_plural   String      @db.VarChar(255)
  icon                  String?     @db.VarChar(255)
  model_name            String?     @db.VarChar(255)
  policy_name           String?     @db.VarChar(255)
  controller            String?     @db.VarChar(255)
  description           String?     @db.VarChar(255)
  generate_permissions  Boolean     @default(false)
  server_side           Int         @default(0) @db.TinyInt
  details               String?     @db.Text
  created_at            DateTime?   @db.Timestamp(0)
  updated_at            DateTime?   @db.Timestamp(0)
  data_rows             data_rows[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model menu_items {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  menu_id    Int?      @db.UnsignedInt
  title      String    @db.VarChar(255)
  url        String    @db.VarChar(255)
  target     String    @default("_self") @db.VarChar(255)
  icon_class String?   @db.VarChar(255)
  color      String?   @db.VarChar(255)
  parent_id  Int?
  order      Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  route      String?   @db.VarChar(255)
  parameters String?   @db.Text
  menus      menus?    @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_items_menu_id_foreign")

  @@index([menu_id], map: "menu_items_menu_id_foreign")
}

model menus {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  name       String       @unique(map: "menus_name_unique") @db.VarChar(255)
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  menu_items menu_items[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model orders {
  order_id  Int       @id @default(autoincrement()) @db.UnsignedInt
  ordered   DateTime  @db.DateTime(0)
  price     Int       @db.UnsignedInt
  client_id Int?      @db.UnsignedInt
  deadline  DateTime? @db.Timestamp(0)
  comment   String?   @db.Text
  clients   clients?  @relation(fields: [client_id], references: [client_id], onDelete: Restrict, onUpdate: Restrict, map: "orders_clients_client_id_fk")

  @@index([client_id], map: "orders_clients_client_id_fk")
}

model pages {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  title            String       @db.VarChar(255)
  excerpt          String?      @db.Text
  body             String?      @db.Text
  image            String?      @db.VarChar(255)
  slug             String       @unique(map: "pages_slug_unique") @db.VarChar(255)
  meta_description String?      @db.Text
  meta_keywords    String?      @db.Text
  status           pages_status @default(INACTIVE)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model permission_role {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "permission_role_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "permission_role_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([permission_id], map: "permission_role_permission_id_index")
  @@index([role_id], map: "permission_role_role_id_index")
}

model permissions {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  key             String            @db.VarChar(255)
  table_name      String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]

  @@index([key], map: "permissions_key_index")
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model posts {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  category_id      Int?
  title            String       @db.VarChar(255)
  seo_title        String?      @db.VarChar(255)
  excerpt          String?      @db.Text
  body             String       @db.Text
  image            String?      @db.VarChar(255)
  slug             String       @unique(map: "posts_slug_unique") @db.VarChar(255)
  meta_description String?      @db.Text
  meta_keywords    String?      @db.Text
  status           posts_status @default(DRAFT)
  featured         Boolean      @default(false)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
}

model roles {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @unique(map: "roles_name_unique") @db.VarChar(255)
  display_name    String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
  user_roles      user_roles[]
  users           users[]
}

model settings {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  key          String  @unique(map: "settings_key_unique") @db.VarChar(255)
  display_name String  @db.VarChar(255)
  value        String? @db.Text
  details      String? @db.Text
  type         String  @db.VarChar(255)
  order        Int     @default(1)
  group        String? @db.VarChar(255)
}

model translations {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  table_name  String    @db.VarChar(255)
  column_name String    @db.VarChar(255)
  foreign_key Int       @db.UnsignedInt
  locale      String    @db.VarChar(255)
  value       String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@unique([table_name, column_name, foreign_key, locale], map: "translations_table_name_column_name_foreign_key_locale_unique")
}

model user_roles {
  user_id BigInt @db.UnsignedBigInt
  role_id BigInt @db.UnsignedBigInt
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_role_id_foreign")
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_user_id_foreign")

  @@id([user_id, role_id])
  @@index([role_id], map: "user_roles_role_id_index")
  @@index([user_id], map: "user_roles_user_id_index")
}

model users {
  id                BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  role_id           BigInt?      @db.UnsignedBigInt
  name              String       @db.VarChar(255)
  email             String       @unique(map: "users_email_unique") @db.VarChar(255)
  avatar            String?      @default("users/default.png") @db.VarChar(255)
  email_verified_at DateTime?    @db.Timestamp(0)
  password          String?      @db.VarChar(255)
  google_id         String?      @unique(map: "users_google_id_uindex") @db.VarChar(256)
  remember_token    String?      @db.VarChar(100)
  settings          String?      @db.Text
  created_at        DateTime?    @db.Timestamp(0)
  updated_at        DateTime?    @db.Timestamp(0)
  user_roles        user_roles[]
  roles             roles?       @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_role_id_foreign")

  @@index([role_id], map: "users_role_id_foreign")
}

model box_f_users {
  f_user_id  Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @unique(map: "box_fake_users_name_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model box_users {
  user_id            Int                  @id @default(autoincrement()) @db.UnsignedInt
  name               String?              @db.VarChar(31)
  email              String               @unique(map: "box_users_email_uindex") @db.VarChar(255)
  password           String               @db.VarChar(255)
  avatar             String?              @db.VarChar(255)
  balance            Int                  @default(0) @db.UnsignedInt
  confirmed          Boolean              @default(false)
  partnership_id     Int?                 @db.UnsignedInt
  refer              Int?                 @db.UnsignedInt
  last_login         DateTime             @default(now()) @db.DateTime(0)
  created            DateTime?            @default(now()) @db.DateTime(0)
  box_stock_items    box_stock_items[]
  partnership        box_partnerships?    @relation(fields: [partnership_id], references: [partnership_id], map: "box_users_box_partnerships_partnership_id_fk")
  box_users          box_users?           @relation("box_usersTobox_users_refer", fields: [refer], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "box_users_box_users_user_id_fk")
  referrals          box_users[]          @relation("box_usersTobox_users_refer")
  confirmation_codes confirmation_codes[]

  @@index([partnership_id], map: "box_users_box_partnerships_partnership_id_fk")
  @@index([refer], map: "box_users_box_users_user_id_fk")
}

model box_stock_items {
  stock_item_id Int       @id @default(autoincrement()) @db.UnsignedInt
  item_id       Int
  user_id       Int       @db.UnsignedInt
  total         Int       @db.UnsignedInt
  user          box_users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "box_stock_items_box_users_user_id_fk")
  item          cs_items  @relation(fields: [item_id], references: [id], onUpdate: Restrict, map: "box_stock_items_box_items_item_id_fk")

  @@unique([item_id, user_id], map: "box_stock_items_item_id_user_id_uindex")
  @@index([user_id], map: "box_stock_items_box_users_user_id_fk")
}

model confirmation_codes {
  confirmation_code_id Int        @id @default(autoincrement()) @db.UnsignedInt
  user_id              Int?       @db.UnsignedInt
  action               String     @db.VarChar(32)
  code                 String     @db.VarChar(6)
  created              DateTime?  @default(now()) @db.DateTime(0)
  box_users            box_users? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "confirmation_codes_box_users_user_id_fk")

  @@unique([user_id, action], map: "confirmation_codes_user_id_action_uindex")
}

model box_partnerships {
  partnership_id  Int         @id @default(autoincrement()) @db.UnsignedInt
  name            String      @unique(map: "box_partnerships_name_uindex") @db.VarChar(64)
  revenue_percent Int?        @db.UnsignedInt
  slug            String?     @unique(map: "box_partnerships_slug_uindex") @db.VarChar(32)
  is_public       Boolean?    @default(true)
  requirements    String?     @db.LongText
  box_users       box_users[]
}

model cs_items {
  id              Int               @id @default(autoincrement())
  type            String?           @db.VarChar(255)
  name            String?           @db.VarChar(255)
  name_ru         String?           @db.VarChar(255)
  quality         String?           @db.VarChar(255)
  rarity          String?           @db.VarChar(255)
  image           String?           @db.VarChar(255)
  popularity      Int?
  price_usd       Float?            @db.Float
  stattrak        Boolean?
  category        String?           @db.VarChar(255)
  box_items       box_items[]
  box_stock_items box_stock_items[]

  @@unique([type, name, quality, stattrak], map: "type_name_quality_stattrak")
}

model boxes {
  id                                          Int             @id @default(autoincrement())
  small_image_id                              Int?            @db.UnsignedInt
  big_image_id                                Int?            @db.UnsignedInt
  category_id                                 Int?            @db.UnsignedInt
  type                                        boxes_type?     @default(basic)
  name                                        String          @unique(map: "box_boxes_name_unique") @db.VarChar(255)
  price                                       Float
  old_price                                   Float?
  open_count                                  Int             @default(0) @db.UnsignedInt
  image                                       String?         @db.VarChar(255)
  background                                  String?         @db.VarChar(255)
  header_color                                String?         @db.VarChar(255)
  is_active                                   Boolean?        @default(false)
  is_recommend                                Boolean         @default(false)
  created_at                                  DateTime?       @db.Timestamp(0)
  updated_at                                  DateTime?       @db.Timestamp(0)
  box_items                                   box_items[]
  box_categories                              box_categories? @relation(fields: [category_id], references: [category_id], onUpdate: SetNull, map: "box_boxes_box_categories_category_id_fk")
  box_images_boxes_big_image_idTobox_images   box_images?     @relation("boxes_big_image_idTobox_images", fields: [big_image_id], references: [image_id], onUpdate: SetNull, map: "box_boxes_box_images_image_id_fk")
  box_images_boxes_small_image_idTobox_images box_images?     @relation("boxes_small_image_idTobox_images", fields: [small_image_id], references: [image_id], onUpdate: SetNull, map: "box_boxes_box_images_image_id_fk_2")

  @@index([big_image_id], map: "box_boxes_big_image_id_foreign")
  @@index([type], map: "box_boxes_box_types_type_id_fk")
  @@index([category_id], map: "box_boxes_category_id_foreign")
  @@index([small_image_id], map: "box_boxes_small_image_id_foreign")
}

model box_items {
  id                  Int      @id @default(autoincrement())
  case_id             Int
  cs_item_id          Int
  probability         Float    @db.Float
  is_box_item_preview Boolean? @default(false)
  boxes               boxes    @relation(fields: [case_id], references: [id], onDelete: Cascade, map: "cases_cs_items_cases_id_fk")
  cs_items            cs_items @relation(fields: [cs_item_id], references: [id], onDelete: Cascade, map: "cases_cs_items_cs_items_id_fk")

  @@unique([case_id, cs_item_id], map: "uk__case_id__cs_item_id")
  @@index([cs_item_id], map: "cases_cs_items_cs_items_id_fk")
}

enum clients_gender {
  male
  female
}

enum pages_status {
  ACTIVE
  INACTIVE
}

enum posts_status {
  PUBLISHED
  DRAFT
  PENDING
}

enum boxes_type {
  basic
  allin
  discount
  event
  hot
}
